name: Create Dev Zip
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PLUGIN_SLUG: ledyer-payments-for-woocommerce
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          tools: composer
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql

      - name: Create composer cache directory
        run: mkdir -p ~/.composer/cache

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://npm.pkg.github.com"
          cache: "pnpm"

      - name: Install dependencies and build project
        run: |
          php -v  # Debug PHP version
          composer install --prefer-dist --no-progress
          composer dump-autoload --optimize
          ls -la vendor/
          pnpm install
          pnpm run build

      - name: Get branch name and commit hash
        id: vars
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          COMMIT_HASH=$(git rev-parse --short HEAD)
          ZIP_FILE_NAME="${{ env.PLUGIN_SLUG }}-dev-${BRANCH_NAME}-${COMMIT_HASH}.zip"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=${ZIP_FILE_NAME}" >> $GITHUB_ENV

      - name: Modify version, prepare zip directory, and create zip file
        run: |
          sed -i 's| \* Version: \([0-9.]*\)| \* Version: \1-dev.${BRANCH_NAME}.${COMMIT_HASH}|' ${{ env.PLUGIN_SLUG }}.php

          # Create and populate temp directory
          mkdir -p dev-zip-temp/${{ env.PLUGIN_SLUG }}

          # First, copy everything except what we explicitly exclude
          rsync -av \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='node_modules/' \
            --exclude='dev-zip-temp/' \
            --exclude='.DS_Store' \
            --exclude='tmp-*/' \
            --exclude='.aider*' \
            --exclude='vite.config.js' \
            --exclude='package.json' \
            --exclude='package-lock.json' \
            --exclude='pnpm-lock.yaml' \
            --exclude='composer.json' \
            --exclude='composer.lock' \
            --exclude='.eslintrc' \
            --exclude='.prettierrc' \
            --exclude='.editorconfig' \
            --exclude='phpcs.xml' \
            --exclude='phpunit.xml' \
            --exclude='webpack.config.js' \
            --exclude='Gruntfile.js' \
            --exclude='README.md' \
            --exclude='CHANGELOG.md' \
            --exclude='CONTRIBUTING.md' \
            --exclude='LICENSE' \
            --exclude='tests/' \
            --exclude='docs/' \
            --exclude='.vscode/' \
            --exclude='.idea/' \
            --exclude='bin/' \
            --exclude='scripts/' \
            . dev-zip-temp/${{ env.PLUGIN_SLUG }}

          # Make sure the assets directory exists in the destination
          mkdir -p dev-zip-temp/${{ env.PLUGIN_SLUG }}/assets/js

          # Copy built assets that might be excluded by .gitignore
          if [ -d "assets" ]; then
            rsync -av assets/ dev-zip-temp/${{ env.PLUGIN_SLUG }}/assets/
          fi

          # If using dist directory instead of assets
          if [ -d "dist" ]; then
            mkdir -p dev-zip-temp/${{ env.PLUGIN_SLUG }}/dist
            rsync -av dist/ dev-zip-temp/${{ env.PLUGIN_SLUG }}/dist/
          fi

          # Clean up vendor directory to reduce size
          if [ -d "vendor" ]; then
            mkdir -p dev-zip-temp/${{ env.PLUGIN_SLUG }}/vendor
            # Copy only necessary files from vendor (exclude tests, docs, etc.)
            rsync -av \
              --exclude='*/tests/' \
              --exclude='*/test/' \
              --exclude='*/docs/' \
              --exclude='*/doc/' \
              --exclude='*/examples/' \
              --exclude='*/example/' \
              --exclude='*/.git/' \
              --exclude='*/.github/' \
              --exclude='*/README*' \
              --exclude='*/CHANGELOG*' \
              --exclude='*/LICENSE*' \
              --exclude='*/CONTRIBUTING*' \
              --exclude='*/.gitignore' \
              --exclude='*/.travis.yml' \
              --exclude='*/.scrutinizer.yml' \
              --exclude='*/phpunit.xml*' \
              --exclude='*/composer.json' \
              --exclude='*/composer.lock' \
              vendor/ dev-zip-temp/${{ env.PLUGIN_SLUG }}/vendor/
          else
            echo "Error: vendor/ directory not found!"
            exit 1
          fi

          # Ensure parent directories exist
          mkdir -p $(dirname ${{ env.ZIP_FILE_NAME }})

          cd dev-zip-temp && zip -r "../${{ env.ZIP_FILE_NAME }}" ${{ env.PLUGIN_SLUG }}

      - name: Upload zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_SLUG }}-dev
          path: ${{ env.ZIP_FILE_NAME }}
          retention-days: 14
