{"version":3,"file":"ledyer-payments.min.js","sources":["../../src/assets/js/ledyer-payments.js"],"sourcesContent":["jQuery( function ( $ ) {\n    if ( typeof LedyerPaymentsParams === \"undefined\" ) {\n        return false\n    }\n\n    const LedyerPayments = {\n        params: LedyerPaymentsParams,\n        gatewayId: LedyerPaymentsParams.gatewayId,\n        sessionId: LedyerPaymentsParams.sessionId,\n        i18n: {},\n\n        init: () => {\n            $( \"body\" ).on( \"click\", \"input#place_order, button#place_order\", ( e ) => {\n                // Do not allow a purchase to go through if ANY error occurs.\n                try {\n                    if ( ! LedyerPayments.isActiveGateway() ) {\n                        return\n                    }\n\n                    const organizationNumber = $( \"#billing_company_number\" ).val().trim()\n                    if ( organizationNumber.length === 0 ) {\n                        LedyerPayments.printNotice( LedyerPayments.params.i18n.companyNumberMissing )\n                        return false\n                    }\n\n                    LedyerPayments.submitOrder( e )\n                } catch ( error ) {\n                    LedyerPayments.printNotice( LedyerPayments.params.i18n.genericError )\n                    console.error( error )\n                    return false\n                }\n            } )\n\n            $( document ).ready( () => {\n                // If \"billing_form\", remove the field from the payment_form and insert it after the company name field. Otherwise, if it is \"payment_form\", leave as-is.\n                if ( LedyerPayments.params.companyNumberPlacement === \"billing_form\" ) {\n                    if ( LedyerPayments.isActiveGateway() ) {\n                        $( \"#billing_company_number_field\" ).remove()\n                    }\n\n                    // Required whenever the customer changes payment method.\n                    $( \"body\" ).on( \"change\", 'input[name=\"payment_method\"]', LedyerPayments.moveCompanyNumberField )\n                    // Required when the checkout is initially loaded, and Ledyer is the chosen gateway.\n                    $( \"body\" ).on( \"updated_checkout\", LedyerPayments.moveCompanyNumberField )\n                }\n\n                // Make the company name field required if Ledyer is the chosen gateway.\n                LedyerPayments.toggleCheckoutField()\n                $( \"body\" ).on( \"change\", 'input[name=\"payment_method\"]', LedyerPayments.toggleCheckoutField )\n                $( \"body\" ).on( \"updated_checkout\", LedyerPayments.toggleCheckoutField )\n            } )\n        },\n\n        /**\n         * Moves the company number field to the billing form or leaves in the payment method.\n         * @returns {void}\n         */\n        moveCompanyNumberField: () => {\n            if ( LedyerPayments.params.companyNumberPlacement === \"billing_form\" ) {\n                if ( LedyerPayments.isActiveGateway() ) {\n                    $( \"#billing_company_number_field\" ).detach().insertAfter( \"#billing_company_field\" ).show()\n                } else {\n                    $( \"#billing_company_number_field\" ).hide()\n                }\n            }\n        },\n\n        /**\n         * Toggles the company name field between required and optional.\n         * @returns {void}\n         */\n        toggleCheckoutField: () => {\n            if ( LedyerPayments.isActiveGateway() ) {\n                LedyerPayments.makeCheckoutFieldRequired( \"billing_company_field\" )\n            } else {\n                LedyerPayments.makeCheckoutFieldOptional( \"billing_company_field\", false )\n            }\n        },\n\n        /**\n         * Makes a checkout field required.\n         * @param {string} id - The ID of the field.\n         * @returns {void}\n         */\n        makeCheckoutFieldRequired: ( id ) => {\n            const i18n = LedyerPayments.i18n.required ?? $( \".required\" ).first().text()\n            if ( i18n.length === 0 ) {\n                // None of the fields are optional, there is nothing to do.\n                return false\n            } else {\n                // Save the i18n for later use.\n                LedyerPayments.i18n.required = i18n\n            }\n\n            const field = $( `#${ id }` )\n\n            const input = field.find( \"input\" ).first()\n            if ( input.attr( \"aria-required\" ) === \"true\" || input.attr( \"required\" ) === \"true\" ) {\n                // The field is already required.\n                return false\n            }\n\n            // Set a flag to determine whether the field was optional before.\n            field.attr( \"data-optional\", \"true\" )\n\n            // Make the input field required.\n            input.attr( \"aria-required\", \"true\" )\n            input.attr( \"required\", \"true\" )\n\n            // Remove the optional label.\n            const label = field.find( \"label\" ).first()\n            label.find( \".optional\" ).remove()\n\n            // Add the required label.\n            let clone = $( \".required\" ).first()\n            if ( clone.length === 0 ) {\n                // No required field exists. Let us make some assumption and create one.\n                clone = $.parseHTML( `<abbr class=\"required\" title=\"required\">${ i18n }</abbr>` )\n            } else {\n                clone = clone.clone()\n            }\n            label.append( clone )\n        },\n\n        /**\n         * Makes a checkout field optional.\n         * @param {string} id - The ID of the field.\n         * @param {boolean} restore - Whether to restore the field to optional.\n         * @returns {void}\n         */\n        makeCheckoutFieldOptional: ( id, restore = true ) => {\n            const i18n = LedyerPayments.i18n.optional ?? $( \".optional\" ).first().text()\n            if ( i18n.length === 0 ) {\n                // None of the fields are required, there is nothing to do.\n                return false\n            } else {\n                // Save the i18n for later use.\n                LedyerPayments.i18n.optional = i18n\n            }\n\n            const field = $( `#${ id }` )\n            if ( ! field.attr( \"data-optional\" ) && ! restore ) {\n                // If restore is false, we won't restore the field to optional.\n                return false\n            }\n\n            if ( field.find( \".required\" ).length === 0 ) {\n                // The field is already optional.\n                return false\n            }\n\n            // Make the input field optional.\n            const input = field.find( \"input\" ).first()\n            input.attr( \"aria-required\", \"false\" )\n            input.attr( \"required\", \"false\" )\n\n            // Remove the required label.\n            const label = field.find( \"label\" ).first()\n            label.find( \".required\" ).remove()\n\n            // Add the optional label.\n            let el = $( \".optional\" ).first()\n            if ( el.length === 0 ) {\n                // No optional field exists. Let us make some assumption and create one.\n                el = $.parseHTML( `<span class=\"optional\">${ i18n }</span>` )\n            } else {\n                el = el.clone()\n            }\n            label.append( el )\n        },\n\n        /**\n         * Handles the process of proceeding with Ledyer payment for an order.\n         *\n         * @param {string} orderId - The key of the order.\n         * @param {Object} customerData - The customer data.\n         * @returns {void}\n         */\n        handleProceedWithLedyer: async ( orderId, customerData ) => {\n            try {\n                LedyerPayments.blockUI()\n\n                const authArgs = { customer: { ...customerData }, sessionId: LedyerPayments.sessionId }\n                const authResponse = await window.ledyer.payments.api.authorize( authArgs )\n\n                if ( authResponse.state === \"authorized\" ) {\n                    LedyerPayments.createOrder( authResponse, orderId )\n                } else if ( authResponse.state === \"awaitingSignatory\" ) {\n                    LedyerPayments.createPendingOrder( authResponse, orderId )\n                }\n            } catch ( error ) {\n                console.error( error )\n            } finally {\n                LedyerPayments.unblockUI()\n            }\n        },\n\n        /**\n         * Prints a notice on the checkout page.\n         * @param {string} message - The message to be displayed.\n         * @returns {void}\n         */\n        printNotice: ( message ) => {\n            const elementId = `${ LedyerPayments.gatewayId }-error-notice`\n\n            // Remove any existing notice that we have created. This won't remove the default WooCommerce notices.\n            $( `#${ elementId }` ).remove()\n\n            const html = `<div id='${ elementId }' class='woocommerce-NoticeGroup'><ul class='woocommerce-error' role='alert'><li>${ message }</li></ul></div>`\n            $( \"form.checkout\" ).prepend( html )\n\n            document.getElementById( elementId ).scrollIntoView( { behavior: \"smooth\" } )\n        },\n\n        /**\n         * Logs a message to the server.\n         * @param {string} message - The message to be logged.\n         * @param {string} level - The log level. Default is \"notice\".\n         * @returns {void}\n         */\n        logToFile: ( message, level = \"notice\" ) => {\n            const { logToFileUrl, logToFileNonce, reference } = LedyerPayments.params\n            console.debug( message )\n\n            $.ajax( {\n                url: logToFileUrl,\n                type: \"POST\",\n                dataType: \"json\",\n                data: {\n                    level,\n                    reference,\n                    message: message,\n                    nonce: logToFileNonce,\n                },\n            } )\n        },\n\n        /**\n         * Unblocks the UI.\n         * @returns {void}\n         */\n        unblockUI: () => {\n            $( \".woocommerce-checkout-review-order-table\" ).unblock()\n            $( \"form.checkout\" ).removeClass( \"processing\" ).unblock()\n        },\n\n        /**\n         * Blocks the UI.\n         * @returns {void}\n         */\n        blockUI: () => {\n            /* Order review. */\n            $( \".woocommerce-checkout-review-order-table\" ).block( {\n                message: null,\n                overlayCSS: {\n                    background: \"#fff\",\n                    opacity: 0.6,\n                },\n            } )\n\n            $( \"form.checkout\" ).addClass( \"processing\" )\n            $( \"form.checkout\" ).block( {\n                message: null,\n                overlayCSS: {\n                    background: \"#fff\",\n                    opacity: 0.6,\n                },\n            } )\n        },\n\n        /**\n         * Checks if the Ledyer Payments is current gateway.\n         * @returns {boolean} - True if current gateway, false otherwise.\n         */\n        isActiveGateway: () => {\n            if ( $( 'input[name=\"payment_method\"]:checked' ).length ) {\n                const currentGateway = $( 'input[name=\"payment_method\"]:checked' ).val()\n                return currentGateway.indexOf( LedyerPayments.gatewayId ) >= 0\n            }\n\n            return false\n        },\n\n        /**\n         * Update the nonce values.\n         *\n         * This is required when a guest user is logged in and the nonce values are updated since the nonce is associated with the user ID (0 for guests).\n         *\n         * @param {object} nonce An object containing the new nonce values.\n         * @returns {void}\n         */\n        updateNonce: ( nonce ) => {\n            for ( const key in nonce ) {\n                if ( key in LedyerPayments.params ) {\n                    LedyerPayments.params[ key ] = nonce[ key ]\n                }\n            }\n        },\n\n        /**\n         * Handles failure to create WooCommerce order.\n         *\n         * @param {string} error - The error message.\n         * @param {string} message - The message to be displayed.\n         * @returns {void}\n         */\n        submitOrderFail: ( error, message ) => {\n            console.debug( \"[%s] Woo failed to create the order. Reason: %s\", error, message )\n\n            LedyerPayments.unblockUI()\n            $( document.body ).trigger( \"checkout_error\" )\n            $( document.body ).trigger( \"update_checkout\" )\n\n            // update_checkout clears notice.\n            LedyerPayments.printNotice( message )\n        },\n\n        /**\n         * Submits the checkout form to WooCommerce for order creation.\n         *\n         * @param {Event} e - The event object.\n         * @returns {void}\n         */\n        submitOrder: ( e ) => {\n            if ( $( \"form.checkout\" ).is( \".processing\" ) ) {\n                return false\n            }\n\n            e.preventDefault()\n            LedyerPayments.blockUI()\n\n            const { submitOrderUrl } = LedyerPayments.params\n            $.ajax( {\n                type: \"POST\",\n                url: submitOrderUrl,\n                data: $( \"form.checkout\" ).serialize(),\n                dataType: \"json\",\n                success: async ( data ) => {\n                    try {\n                        if ( data.nonce ) {\n                            LedyerPayments.updateNonce( data.nonce )\n                        }\n\n                        if ( \"success\" === data.result ) {\n                            const { order_key: orderId, customer } = data\n\n                            LedyerPayments.logToFile(\n                                `Successfully placed order ${ orderId }. Sending \"shouldProceed: true\".`,\n                            )\n\n                            LedyerPayments.handleProceedWithLedyer( orderId, customer )\n                        } else {\n                            console.warn( \"AJAX request succeeded, but the Woo order was not created.\", data )\n                            throw \"SubmitOrder failed\"\n                        }\n                    } catch ( err ) {\n                        console.error( err )\n                        if ( data.messages ) {\n                            // Strip HTML code from messages.\n                            const messages = data.messages.replace( /<\\/?[^>]+(>|$)/g, \"\" )\n\n                            LedyerPayments.logToFile( \"Checkout error | \" + messages, \"error\" )\n                            LedyerPayments.submitOrderFail( \"submitOrder\", messages )\n                        } else {\n                            LedyerPayments.logToFile( \"Checkout error | No message\", \"error\" )\n                            LedyerPayments.submitOrderFail( \"submitOrder\", \"Checkout error\" )\n                        }\n                    }\n                },\n                error: ( data ) => {\n                    try {\n                        LedyerPayments.logToFile( \"AJAX error | \" + JSON.stringify( data ), \"error\" )\n                    } catch ( e ) {\n                        LedyerPayments.logToFile( \"AJAX error | Failed to parse error message.\", \"error\" )\n                    }\n                    LedyerPayments.submitOrderFail( \"AJAX\", \"Something went wrong, please try again.\" )\n                },\n            } )\n        },\n\n        /**\n         * Informs Ledyer to proceed with creating the order in their system.\n         *\n         * This is done after the payment has been authorized, and we've verified that the order was created in WooCommerce.\n         *\n         * @throws {Error} If the authResponse state is not \"authorized\".\n         *\n         * @param {object} authResponse The response from the authorization request.\n         * @param {string} orderId The WC order ID.\n         * @returns {void}\n         */\n        createOrder: ( authResponse, orderId ) => {\n            if ( authResponse.state !== \"authorized\" ) {\n                throw new Error(\n                    `createOrder was called with an invalid state. Received ${ authResponse.state }, expected 'authorized'.`,\n                )\n            }\n\n            const authToken = authResponse.authorizationToken\n            const { state } = authResponse\n            const { createOrderUrl, createOrderNonce } = LedyerPayments.params\n\n            $.ajax( {\n                type: \"POST\",\n                url: createOrderUrl,\n                dataType: \"json\",\n                data: {\n                    state,\n                    order_key: orderId,\n                    auth_token: authToken,\n                    nonce: createOrderNonce,\n                },\n                async: false,\n                success: ( data ) => {\n                    if ( ! data.success ) {\n                        LedyerPayments.submitOrderFail(\n                            \"createOrder\",\n                            \"The payment was successful, but the order could not be created.\",\n                        )\n\n                        return\n                    }\n\n                    const {\n                        data: { location },\n                    } = data\n                    window.location = location\n                },\n                error: ( jqXHR, textStatus, errorThrown ) => {\n                    console.debug( \"Error:\", textStatus, errorThrown )\n                    console.debug( \"Response:\", jqXHR.responseText )\n\n                    console.error( errorThrown )\n                    LedyerPayments.submitOrderFail(\n                        \"createOrder\",\n                        \"The payment was successful, but the order could not be created.\",\n                    )\n                },\n            } )\n        },\n\n        /**\n         * Informs Ledyer to proceed with creating the pending payment order in their system.\n         *\n         * This is done after the payment has been authorized, and we've verified that the order was created in WooCommerce.\n         *\n         * @throws {Error} If the authResponse state is not \"awaitingSignatory\".\n         *\n         * @param {string} orderId The WC order ID.\n         * @returns {void}\n         */\n        createPendingOrder: ( authResponse, orderId ) => {\n            if ( authResponse.state !== \"awaitingSignatory\" ) {\n                throw new Error(\n                    `createPendingOrder was called with an invalid state. Received ${ authResponse.state }, expected 'awaitingSignatory'.`,\n                )\n            }\n\n            const { pendingPaymentUrl, pendingPaymentNonce } = LedyerPayments.params\n\n            $.ajax( {\n                type: \"POST\",\n                url: pendingPaymentUrl,\n                dataType: \"json\",\n                data: {\n                    order_key: orderId,\n                    nonce: pendingPaymentNonce,\n                },\n                async: false,\n                success: ( data ) => {\n                    if ( ! data.success ) {\n                        LedyerPayments.submitOrderFail(\n                            \"pendingPayment\",\n                            \"The payment is pending payment. Failed to redirect to order received page.\",\n                        )\n\n                        return\n                    }\n\n                    const {\n                        data: { location },\n                    } = data\n                    window.location = location\n                },\n                error: ( jqXHR, textStatus, errorThrown ) => {\n                    console.debug( \"Error:\", textStatus, errorThrown )\n                    console.debug( \"Response:\", jqXHR.responseText )\n\n                    LedyerPayments.submitOrderFail(\n                        \"pendingPayment\",\n                        \"The payment is pending payment. Failed to redirect to order received page.\",\n                    )\n                },\n            } )\n        },\n    }\n\n    LedyerPayments.init()\n} )\n"],"names":["jQuery","$","LedyerPaymentsParams","LedyerPayments","params","gatewayId","sessionId","i18n","init","on","e","isActiveGateway","val","trim","length","printNotice","companyNumberMissing","submitOrder","error","genericError","console","document","ready","companyNumberPlacement","remove","moveCompanyNumberField","toggleCheckoutField","detach","insertAfter","show","hide","makeCheckoutFieldRequired","makeCheckoutFieldOptional","id","required","first","text","field","input","find","attr","label","clone","parseHTML","append","restore","optional","el","handleProceedWithLedyer","async","orderId","customerData","blockUI","authArgs","customer","authResponse","window","ledyer","payments","api","authorize","state","createOrder","createPendingOrder","unblockUI","message","elementId","html","prepend","getElementById","scrollIntoView","behavior","logToFile","level","logToFileUrl","logToFileNonce","reference","debug","ajax","url","type","dataType","data","nonce","unblock","removeClass","block","overlayCSS","background","opacity","addClass","indexOf","updateNonce","key","submitOrderFail","body","trigger","is","preventDefault","submitOrderUrl","serialize","success","result","warn","order_key","err","messages","replace","JSON","stringify","Error","authToken","authorizationToken","createOrderUrl","createOrderNonce","auth_token","location","jqXHR","textStatus","errorThrown","responseText","pendingPaymentUrl","pendingPaymentNonce"],"mappings":"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"}